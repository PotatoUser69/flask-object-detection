# Flask Object Detection Web App

This repository contains a web application built with Flask to handle image uploads, perform object detection inference using a pre-trained model, and display results with various metrics.

## Features

- Upload images for object detection.
- View detected objects and their confidence scores.
- Display real-time metrics such as total detections per class and average confidence scores.

## Prerequisites

Before running the app, ensure you have **Docker** and **Docker Compose** installed.

## Setup Instructions

### Step 1: Clone the repository
Clone the repository to your local machine:
```bash
git clone https://github.com/yourusername/flask-object-detection.git
cd flask-object-detection
```
### Step 2: Build and Run the Application
Make sure you're in the `flask-app` folder of the project, and run the following Docker Compose command to build and start the app:

```bash
docker-compose up --build -d
```
This will:

- Build the Docker image for the Flask app.
- Start the container in the background.

### Step 3: Access the App
Once the app is up and running, you can access it in your web browser at:

```bash
http://localhost:5000
```

This should be exactly what you're looking for. Let me know if you'd like to add anything else!

### Application Workflow

#### 1. Upload Image:
- Select an image (JPG/JPEG/PNG) from your local machine.
- The app will display the image and allow you to upload it for processing.

#### 2. Inference and Result Display:
- The uploaded image will go through an object detection model to detect objects.
- Detected objects, along with their confidence scores, will be shown as bounding boxes.

#### 3. Metrics Page:
- Real-time metrics are calculated and displayed:
  - Total number of images processed.
  - Average FPS.
  - Average confidence score per class.
- Metrics are shown both as a bar chart and summarized per detected class.

### Directories:

- **saved_model/**: Contains the trained model.
- **app/data/**: Contains model-related data like `label_map.pbtxt`.
- **app/uploads/**: Directory for storing uploaded images.
- **app/originals/**: Directory for storing original images.
- **app/protos/**: Contains protocol buffers for TensorFlow models.
- **app/core/**: Core functionalities of the application.
- **app/utils/**: Helper functions for inference and file handling.
- **app/templates/**: Contains HTML templates for the frontend.
- **app/static/**: Contains static files like CSS and JS.
- **app/**: Main application directory containing Python files.
  - **app.py**: Main Flask app script.
  - **inference.py**: Handles the object detection logic.
  - **routes.py**: Defines the routes and API endpoints.
  - **requirements.txt**: Lists the Python dependencies for the app.
  - **metrics.csv**: Stores metrics data.
  - **.gitignore**: Specifies files and directories to be ignored by Git.

### Key Files:
- **docker-compose.yml**: Contains configuration for building and running the app in Docker.
- **Dockerfile**: Specifies the instructions for building the Flask app Docker image.

### Running the App Locally (Without Docker)

If you prefer to run the app without Docker, follow these steps:

1. Install the required Python dependencies:
   ```bash
   pip install -r requirements.txt

2. Run the Flask app:
   ```bash
   python app.py

3. Access the app in your browser at:
   ```bash
    http://localhost:5000


Now you can copy the full section with the updated information! Let me know if you'd like further adjustments.
